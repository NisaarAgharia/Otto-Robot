
/*************************************************** 
  Designed specifically to work with the Otto DIY 16x8 LED Matrix eyes 

  The Eyes display use I2C to communicate, 2 pins are required to 
  interface. There are multiple selectable I2C addresses. 

  Otto DIY invests time and resources providing this open source code, 
  please support Otto DIY and open-source hardware by purchasing 
  products from ottodiy.com!

  Written by Camilo Parra Palacio for Otto DIY.
  Refurbished by Birger T for the Otto Builder Community 
  BSD license, all text above must be included in any redistribution

 ****************************************************/
 #ifndef OTTO_EYES_H
 #define OTTO_EYES_H
  const uint8_t Eyepairstable[][16] PROGMEM = {
  {  B01111110,B10000001,B10111001,B10101001,B10111001,B10010001,B10111001,B10010001,B10010001,B10111001,B10010001,B10111001,B10101001,B10111001,B10000001,B01111110}, // E_logo[]
  {  B00000000,B00111100,B00000010,B00000010,B00000010,B00000010,B00111100,B00000000,B00000000,B00111100,B00000010,B00000010,B00000010,B00000010,B00111100,B00000000}, // E_happy[]
  {  B00000000,B00111100,B01000010,B01001010,B01000010,B01000010,B00111100,B00000000,B00000000,B00111100,B01000010,B01001010,B01000010,B01000010,B00111100,B00000000}, // E_eyes[]
  {  B00000000,B00010000,B00010000,B00010000,B00010000,B00010000,B00010000,B00000000,B00000000,B00010000,B00010000,B00010000,B00010000,B00010000,B00010000,B00000000}, // E_sad[]
  {  B00000000,B00100010,B00010100,B00001000,B00010100,B00100010,B00000000,B00000000,B00000000,B00000000,B00100010,B00010100,B00001000,B00010100,B00100010,B00000000}, // E_xx[]
  {  B01000001,B00100010,B00010100,B00001000,B00010100,B00100010,B01000001,B00000000,B00000000,B01000001,B00100010,B00010100,B00001000,B00010100,B00100010,B01000001}, // E_XX[]
  {  B00000000,B00011110,B00111100,B01111000,B01110000,B00100000,B00000000,B00000000,B00000000,B00000000,B00100000,B01110000,B01111000,B00111100,B00011110,B00000000}, // E_angry[]
  {  B00000000,B00000010,B00000100,B00001000,B00010000,B00100000,B00000000,B00000000,B00000000,B00000000,B00100000,B00010000,B00001000,B00000100,B00000010,B00000000}, // E_angry2[]
  {  B00000000,B00100010,B00110010,B00101010,B00100110,B00100010,B00000000,B00000000,B00000000,B00000000,B00100010,B00110010,B00101010,B00100110,B00100010,B00000000}, // E_sleep[]
  {  B00000000,B00100000,B00010000,B00001000,B00000100,B00000010,B00000000,B00000000,B00000000,B00000000,B00000010,B00000100,B00001000,B00010000,B00100000,B00000000}, // E_freetful[]
  {  B00000000,B00001100,B00011110,B00111100,B00111100,B00011110,B00001100,B00000000,B00000000,B00001100,B00011110,B00111100,B00111100,B00011110,B00001100,B00000000}, // E_love[]
  {  B00000000,B01111100,B10000010,B10111010,B10101010,B10001010,B01111000,B00000000,B00000000,B11111111,B10000001,B10111101,B10100101,B10000101,B00000101,B11111101}, // E_confused[]
  {  B00000000,B00100000,B00010000,B00001000,B00010000,B00100000,B00010000,B00000000,B00000000,B00100000,B00010000,B00001000,B00010000,B00100000,B00010000,B00000000}, // E_wave[]
  {  B00000000,B00000000,B01111110,B11111111,B01111110,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B01111110,B11111111,B01111110,B00000000,B00000000}, // E_magic[]
  {  B00000000,B00110000,B01111000,B01111000,B01111100,B00111100,B00001000,B00000000,B00000000,B00001000,B00111100,B01111100,B01111000,B01111000,B00110000,B00000000}, // E_fail[]
}; // Eyestable[]

#define NUMBER_OF_EYEPAIRS (uint8_t)sizeof(Eyepairstable)/sizeof(Eyepairstable[0])

#define eyeslogo        0
#define eyeshappy       1
#define eyes            2
#define eyessad         3
#define eyesxx          4
#define eyesXX          5
#define eyesangry       6
#define eyesangry2      7
#define eyessleep       8
#define eyesfretfull    9
#define eyeslove       10
#define eyesconfused   11
#define eyeswave       12
#define eyesmagic      13
#define eyesfail       14


#endif // OTTO_EYES_H

#if 0
// My Brain Extension - Ideas for more Eyes to come

// remember also the Robot Eye somewhere in the examples

static const uint8_t PROGMEM
bird0[] =
{ 
  B00011000,
  B00111100,
  B00110100,
  B11111111,
  B10111111,
  B11011100,
  B01111100,
  B00111000 }
,
bird1[] =
{ 
  B00000000,
  B00011000,
  B00111100,
  B00110111,
  B11111111,
  B10011100,
  B11111100,
  B00111000 }
,
bird2[] =
{ 
  B00011000,
  B00111100,
  B00110100,
  B00111111,
  B01111111,
  B11011100,
  B10111100,
  B11111000 };

static const uint8_t PROGMEM // Bitmaps are stored in program memory
  blinkImg[][8] = {    // Eye animation frames
  { B00000000,         // Fully open eye
    B00111100,
    B01111110,
    B01111110,
    B01111110,
    B01111110,
    B00111100,
    B00000000 },
  { B00011000,
    B00011000,
    B00111110,
    B01111110,
    B01111110,
    B00111110,
    B00111100,
    B00011000 },
  { B00011000,
    B00011000,
    B00011100,
    B00111100,
    B00111100,
    B00011100,
    B00011000,
    B00011000 },
  { B00001000,
    B00011000,
    B00001100,
    B00001100,
    B00001100,
    B00001100,
    B00011000,
    B00001000 },
  { B00001000,         // Fully closed eye
    B00000100,
    B00000100,
    B00000100,
    B00000100,
    B00000100,
    B00000100,
    B00001000 } },

uint8_t
  blinkIndex[] = { 1, 2, 3, 4, 3, 2, 1 }, // Blink bitmap sequence
  blinkCountdown = 200, // Countdown to next blink (in frames)
  gazeCountdown  =  75, // Countdown to next eye movement
  gazeFrames     =  100; // Duration of eye movement (smaller = faster)
int8_t
  eyeX = 3, eyeY = 3,   // Current eye position
  newX = 3, newY = 3,   // Next eye position
  dX   = 0, dY   = 0;   // Distance from prior to new position
#endif
